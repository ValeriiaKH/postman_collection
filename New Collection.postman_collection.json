{
	"info": {
		"_postman_id": "60bf8d63-e818-4a26-b317-54a18f708af6",
		"name": "New Collection__",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Autotest_1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//1. Correct response format JSON\r",
							"pm.test(\"Correct response format JSON\", function() {\r",
							"    pm.response.to.have.jsonBody()\r",
							"    });\r",
							"\r",
							"//2. We have all declared fields in the response    \r",
							"pm.test(\"Check that we have all declared fields\", function() {\r",
							"    const jsonData = pm.response.json();\r",
							"\r",
							"    pm.expect(jsonData).to.have.property(\"people\");\r",
							"    pm.expect(jsonData).to.have.property(\"planets\");\r",
							"    pm.expect(jsonData).to.have.property(\"films\");\r",
							"    pm.expect(jsonData).to.have.property(\"species\");\r",
							"    pm.expect(jsonData).to.have.property(\"vehicles\");\r",
							"    pm.expect(jsonData).to.have.property(\"starships\");\r",
							"});\r",
							"\r",
							"//3. Field value is not NULL\r",
							"pm.test(\"Check if value is not NULL\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(null);\r",
							"    pm.expect(jsonData.planets).not.equal(null);\r",
							"    pm.expect(jsonData.films).not.equal(null);\r",
							"    pm.expect(jsonData.species).not.equal(null);\r",
							"    pm.expect(jsonData.vehicles).not.equal(null);\r",
							"    pm.expect(jsonData.starships).not.equal(null);\r",
							"});\r",
							"\r",
							"//4. Field value is not empty\r",
							"pm.test(\"Check if value is not empty\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).not.equal(\"\");\r",
							"    pm.expect(jsonData.planets).not.equal(\"\");\r",
							"    pm.expect(jsonData.films).not.equal(\"\");\r",
							"    pm.expect(jsonData.species).not.equal(\"\");\r",
							"    pm.expect(jsonData.vehicles).not.equal(\"\");\r",
							"    pm.expect(jsonData.starships).not.equal(\"\");\r",
							"})\r",
							"\r",
							"//5. Check if field corresponds to a specific value \r",
							"pm.test(\"Check if field corresponds to a specific value\", function(){\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.people).to.equal(\"http://swapi.dev/api/people/\");\r",
							"    pm.expect(jsonData.planets).to.equal(\"http://swapi.dev/api/planets/\");\r",
							"    pm.expect(jsonData.films).to.equal(\"http://swapi.dev/api/films/\");\r",
							"    pm.expect(jsonData.species).to.equal(\"http://swapi.dev/api/species/\");\r",
							"    pm.expect(jsonData.vehicles).to.equal(\"http://swapi.dev/api/vehicles/\");\r",
							"    pm.expect(jsonData.starships).to.equal(\"http://swapi.dev/api/starships/\");\r",
							"})\r",
							"\r",
							"//6. Status code is 200\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"//7. Status message is ok\r",
							"pm.test(\"Status message is ok\", function() {\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"})\r",
							"\r",
							"//8. Response time is less then 100ms\r",
							"pm.test(\"Response time is less then 100ms\", function (){\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"//9. There is a spesific header in the response\r",
							"pm.test(\"There is a spesific header in the response\", function (){\r",
							"    pm.response.to.have.header(\"Content-Type\");\r",
							"})\r",
							"\r",
							"//10. The response has a spesific header whith a spesific value\r",
							"pm.test(\"The response has a spesific header whith a spesific value\", function (){\r",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\")\r",
							"});\r",
							"\r",
							"//11. Cookie exists\r",
							"pm.test(\"Cookie exists\", function (){\r",
							"    pm.cookies.has(\"Cookie_6\")\r",
							"});\r",
							"\r",
							"//12. Cookie has value\r",
							"pm.test(\"Cookie has value\", function (){\r",
							"    try{\r",
							"        var MY_COOKIE = pm.cookies.get(\"Cookie_6\");\r",
							"        console.log(MY_COOKIE);\r",
							"    } catch(e) {\r",
							"        console.log(\"SOME PROBLEM WITH COOKIE ->\" +e)\r",
							"    }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    //spesify the type of object\r",
							"    \"type\": \"object\",\r",
							"    //spesify requires properties\r",
							"    \"required\": [\"people\", \"planets\", \"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    //describe the vproperties\r",
							"    \"properties\": {\r",
							"        \"people\": {\"type\": \"string\"},\r",
							"        \"planets\": {\"type\": \"string\"},\r",
							"        \"films\": {\"type\": \"string\"},\r",
							"        \"species\": {\"type\": \"string\"},\r",
							"        \"vehicles\": {\"type\": \"string\"},\r",
							"        \"starships\": {\"type\": \"string\"},\r",
							"    }\r",
							"\r",
							"};\r",
							"\r",
							"pm.test(\"Body is correct\", function (){\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://swapi.dev/api/people/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var data = JSON.parse(responseBody);\r",
							"\r",
							"var schema = {\r",
							"    \"type\": \"object\",\r",
							"    \"required\": [\"name\",\"homeworld\",\"films\", \"species\", \"vehicles\", \"starships\"],\r",
							"    \"propertiy\": {\r",
							"        \"name\": {\"type\": \"string\"},\r",
							"        \"homeworld\": {\"type\": \"string\"},\r",
							"        \"films\": {\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"        \"species\":{\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"        \"vehicles\":{\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"        \"starships\":{\r",
							"            \"type\": \"array\",\r",
							"            \"items\": {\"type\": \"string\"}\r",
							"        },\r",
							"    }\r",
							"};\r",
							"pm.test('Body is correct', function(){\r",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.dev/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"dev"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "auth_basic auth",
			"request": {
				"auth": {
					"type": "basic",
					"basic": [
						{
							"key": "password",
							"value": "password",
							"type": "string"
						},
						{
							"key": "username",
							"value": "postman",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "basic-auth(header)",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Basic cG9zdG1hbjpwYXNzd29yZA==",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://postman-echo.com/basic-auth",
					"protocol": "https",
					"host": [
						"postman-echo",
						"com"
					],
					"path": [
						"basic-auth"
					]
				}
			},
			"response": []
		},
		{
			"name": "https://a12ac378-8aea-4849-a5ff-c977b11bc69a.mock.pstmn.io",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://a12ac378-8aea-4849-a5ff-c977b11bc69a.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"a12ac378-8aea-4849-a5ff-c977b11bc69a",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://a12ac378-8aea-4849-a5ff-c977b11bc69a.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://a12ac378-8aea-4849-a5ff-c977b11bc69a.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"a12ac378-8aea-4849-a5ff-c977b11bc69a",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 19 Feb 2021 18:07:24 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=2b6736cbfaad9ef6"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=a06f513ba33cf182"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1613758104"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Lera\",\n        \"message\": \"Success.\",\n        \"header\": \"You need an example\"\n    }\n}"
				}
			]
		},
		{
			"name": "2_https://a12ac378-8aea-4849-a5ff-c977b11bc69a.mock.pstmn.io_",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\":\"Lear\"}"
				},
				"url": {
					"raw": "https://a12ac378-8aea-4849-a5ff-c977b11bc69a.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"a12ac378-8aea-4849-a5ff-c977b11bc69a",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://a12ac378-8aea-4849-a5ff-c977b11bc69a.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://a12ac378-8aea-4849-a5ff-c977b11bc69a.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"a12ac378-8aea-4849-a5ff-c977b11bc69a",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 19 Feb 2021 18:07:24 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=2b6736cbfaad9ef6"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=a06f513ba33cf182"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1613758104"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Lera\",\n        \"message\": \"Success.\",\n        \"header\": \"You need an example\"\n    }\n}"
				},
				{
					"name": "2_https://a12ac378-8aea-4849-a5ff-c977b11bc69a.mock.pstmn.io_",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\":\"Lear\"}"
						},
						"url": {
							"raw": "https://a12ac378-8aea-4849-a5ff-c977b11bc69a.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"a12ac378-8aea-4849-a5ff-c977b11bc69a",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Date",
							"value": "Fri, 19 Feb 2021 18:21:01 GMT"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Transfer-Encoding",
							"value": "chunked"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=9cf3f689218e16b3"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=40ed2833c7ac8916"
						},
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "119"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1613758921"
						},
						{
							"key": "ETag",
							"value": "W/\"96-S/5iQ2y1qqIInh5BwoPc+chvDJU\""
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Lera_1\",\n        \"status\": \"created\",\n        \"message\": \"Success\"\n        \n    }\n}"
				}
			]
		}
	]
}